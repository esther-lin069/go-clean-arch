// Code generated by MockGen. DO NOT EDIT.
// Source: bookie_entity.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	entity "go-clean-arch/domain/bookie/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBookieUsecase is a mock of BookieUsecase interface.
type MockBookieUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookieUsecaseMockRecorder
}

// MockBookieUsecaseMockRecorder is the mock recorder for MockBookieUsecase.
type MockBookieUsecaseMockRecorder struct {
	mock *MockBookieUsecase
}

// NewMockBookieUsecase creates a new mock instance.
func NewMockBookieUsecase(ctrl *gomock.Controller) *MockBookieUsecase {
	mock := &MockBookieUsecase{ctrl: ctrl}
	mock.recorder = &MockBookieUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookieUsecase) EXPECT() *MockBookieUsecaseMockRecorder {
	return m.recorder
}

// GetEventByEventID mocks base method.
func (m *MockBookieUsecase) GetEventByEventID(eventID int64) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByEventID", eventID)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByEventID indicates an expected call of GetEventByEventID.
func (mr *MockBookieUsecaseMockRecorder) GetEventByEventID(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByEventID", reflect.TypeOf((*MockBookieUsecase)(nil).GetEventByEventID), eventID)
}

// GetSportList mocks base method.
func (m *MockBookieUsecase) GetSportList() ([]entity.Sport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSportList")
	ret0, _ := ret[0].([]entity.Sport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSportList indicates an expected call of GetSportList.
func (mr *MockBookieUsecaseMockRecorder) GetSportList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSportList", reflect.TypeOf((*MockBookieUsecase)(nil).GetSportList))
}

// MockBookieRepository is a mock of BookieRepository interface.
type MockBookieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookieRepositoryMockRecorder
}

// MockBookieRepositoryMockRecorder is the mock recorder for MockBookieRepository.
type MockBookieRepositoryMockRecorder struct {
	mock *MockBookieRepository
}

// NewMockBookieRepository creates a new mock instance.
func NewMockBookieRepository(ctrl *gomock.Controller) *MockBookieRepository {
	mock := &MockBookieRepository{ctrl: ctrl}
	mock.recorder = &MockBookieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookieRepository) EXPECT() *MockBookieRepositoryMockRecorder {
	return m.recorder
}

// GetConfigSportList mocks base method.
func (m *MockBookieRepository) GetConfigSportList() ([]entity.Sport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigSportList")
	ret0, _ := ret[0].([]entity.Sport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigSportList indicates an expected call of GetConfigSportList.
func (mr *MockBookieRepositoryMockRecorder) GetConfigSportList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigSportList", reflect.TypeOf((*MockBookieRepository)(nil).GetConfigSportList))
}

// GetEventByEventID mocks base method.
func (m *MockBookieRepository) GetEventByEventID(eventID int64) (entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByEventID", eventID)
	ret0, _ := ret[0].(entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByEventID indicates an expected call of GetEventByEventID.
func (mr *MockBookieRepositoryMockRecorder) GetEventByEventID(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByEventID", reflect.TypeOf((*MockBookieRepository)(nil).GetEventByEventID), eventID)
}
